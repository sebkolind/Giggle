{"mappings":"AAAA,qBAA4B,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;AAEnD,eAAsB;IACpB,QAAQ,CAAC,EAAE,OAAO,CAAA;CACnB,CAAA;AAED,cAAqB;IACnB,GAAG,EAAE,MAAM,CAAA;IACX,EAAE,CAAC,EAAE,MAAM,CAAA;IACX,KAAK,CAAC,EAAE,MAAM,EAAE,CAAA;IAChB,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAA;IACnB,UAAU,CAAC,EAAE,aAAa,CAAA;IAC1B,UAAU,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;CACpC,CAAA;AAED,wBAA+B,CAAA,OAAO,GAAG;IACvC,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAA;CACvB,KAAG,WAAW,GAAG;IAChB,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAA;CACvB,CAAA,CAAA;AAOD,cAAqB,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;ACxB7C,OAAO,MAAM,iBAAkB,MAAM,oCAAsB,gBAAgB,EAY1E,CAAA","sources":["src/src/types.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,"import { Giggle, Options, IndexableElement, Source, Context } from './types'\n\nexport const giggle = (source: Giggle, options?: Options): IndexableElement[] => {\n  if (source.elements == null) {\n    throw new Error('`elements` at the root is required.')\n  }\n\n  const elements = source.elements.map(el => createElement(el.tag, el))\n\n  if (options?.appendTo != null) {\n    elements.forEach(el => options.appendTo?.appendChild(el))\n  }\n\n  return elements\n}\n\nconst createElement = (tag: string, source: Source): IndexableElement => {\n  const el = document.createElement(tag) as IndexableElement\n  const context = { el, source }\n\n  attachId(context)\n  attachClasses(context)\n  attachAttributes(context)\n  attachProperties(context)\n\n  appendChildren(context)\n\n  return el\n}\n\nconst appendChildren = (context: Context): void => {\n  if (context.source.elements == null) {\n    return\n  }\n\n  giggle(context.source).forEach(so => context.el.appendChild(so))\n}\n\nconst attachProperties = (context: Context): void => {\n  if (context.source.properties == null) {\n    return\n  }\n\n  Object.keys(context.source.properties).forEach(p => {\n    if (context.el[p] == null) {\n      return\n    }\n\n    context.el[p] = context.source.properties?.[p]\n  })\n}\n\nconst attachAttributes = (context: Context): void => {\n  if (context.source.attributes == null) {\n    return\n  }\n\n  Object.keys(context.source.attributes).forEach(a => {\n    if (context.source.attributes?.[a] == null) {\n      return\n    }\n\n    context.el.setAttribute(a, context.source.attributes[a])\n  })\n}\n\nconst attachClasses = (context: Context): void => {\n  if (context.source.class == null) {\n    return\n  }\n\n  context.source.class.forEach(cl => context.el.classList.add(cl))\n}\n\nconst attachId = (context: Context): void => {\n  context.el.id = context.source.id || `${context.source.tag}-${Math.random().toString(16).substring(2, 8)}`\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}