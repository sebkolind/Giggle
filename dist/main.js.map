{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["type UnknownRecord = Record<string, unknown>\ntype Options = {\n  appendTo?: Element\n}\ntype Source = {\n  tag: string\n  id?: string\n  class?: string[]\n  elements?: Source[]\n  properties?: UnknownRecord\n  attributes?: Record<string, string>\n}\ntype IndexableElement = Element & {\n  [key: string]: unknown\n} | HTMLElement & {\n  [key: string]: unknown\n}\ntype Context = {\n  el: IndexableElement\n  source: Source\n}\n\nexport const giggle = (source: Partial<Source>, options?: Options): IndexableElement[] => {\n  if (source.elements == null) {\n    throw new Error('`elements` at the root is required.')\n  }\n\n  const elements = source.elements.map(el => createElement(el.tag, el))\n\n  if (options?.appendTo != null) {\n    elements.forEach(el => options.appendTo?.appendChild(el))\n  }\n\n  return elements\n}\n\nconst createElement = (tag: string, source: Source): IndexableElement => {\n  const el = document.createElement(tag) as IndexableElement\n  const context = { el, source }\n\n  attachId(context)\n  attachClasses(context)\n  attachAttributes(context)\n  attachProperties(context)\n\n  appendChildren(context)\n\n  return el\n}\n\nconst appendChildren = (context: Context): void => {\n  if (context.source.elements == null) {\n    return\n  }\n\n  giggle(context.source).forEach(so => context.el.appendChild(so))\n}\n\nconst attachProperties = (context: Context): void => {\n  if (context.source.properties == null) {\n    return\n  }\n\n  Object.keys(context.source.properties).forEach(p => {\n    if (context.el[p] == null) {\n      return\n    }\n\n    context.el[p] = context.source.properties?.[p]\n  })\n}\n\nconst attachAttributes = (context: Context): void => {\n  if (context.source.attributes == null) {\n    return\n  }\n\n  Object.keys(context.source.attributes).forEach(a => {\n    if (context.source.attributes?.[a] == null) {\n      return\n    }\n\n    context.el.setAttribute(a, context.source.attributes[a])\n  })\n}\n\nconst attachClasses = (context: Context): void => {\n  if (context.source.class == null) {\n    return\n  }\n\n  context.source.class.forEach(cl => context.el.classList.add(cl))\n}\n\nconst attachId = (context: Context): void => {\n  context.el.id = context.source.id || `${context.source.tag}-${Math.random().toString(16).substring(2, 8)}`\n}\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}